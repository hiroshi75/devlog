---
description: 
globs: 
alwaysApply: true
---
## 開発の流れ

### ライブラリの管理
ライブラリはuvで管理しているので、インストールは
uv add ライブラリ名
でインストールしてください。

### テスト
 - テストはtestsディレクトリにおき、pytestで実行します。
 - 開発はTDDで行います。
 - テストが通らない場合、テストを書き換えるのではなく、原因を調査して実装を修正してください。
 - 

 ### 開発の管理

 - README.mdに作るものの仕様が書いてあります。
 - .envはあなたには見えないかもしれませんが、適切に書かれています。

## DevStatusMCP 開発方針

### プロジェクト概要
- Slack風の開発状況共有サービスのMCPサーバー
- 複数人が複数プロジェクトで複数タスクを進める状況を一元管理
- メッセージ形式での進捗管理とコミュニケーション
- LLMとの統合による自然言語での操作

### 技術スタック
- Python 3.12+
- FastMCP（MCPサーバーフレームワーク）
- SQLAlchemy（ORM）
- PostgreSQL/SQLite（データベース）
- Alembic（マイグレーション）
- Pydantic（データバリデーション）
- pytest（テスティング）

### ディレクトリ構造
```
devlog/
├── app/
│   ├── main.py          # FastMCPサーバーのエントリーポイント
│   ├── models/          # SQLAlchemyモデル定義
│   ├── schemas/         # Pydanticスキーマ定義
│   ├── crud/            # CRUD操作ロジック
│   ├── tools/           # MCPツール定義
│   ├── resources/       # MCPリソース定義
│   └── db/              # データベース接続・設定
├── tests/               # テストコード
├── alembic/             # データベースマイグレーション
├── docs/                # ドキュメント
│   ├── TODO.md          # 開発タスク管理
│   └── fastmcp_guide.md # FastMCP基本ガイド
└── .env                 # 環境変数設定
```

### 開発の進め方

#### 1. タスク管理
- `docs/TODO.md`に全タスクがスモールステップで記載されている
- 完了したタスクはチェックボックスにチェックを入れる
- 新しい課題は適切なセクションに追加する
- 優先度の高いタスクから順に実施する

#### 2. 実装の順序
1. **環境構築** - ディレクトリ構造と依存関係のセットアップ
2. **データベース設計** - モデル定義とマイグレーション設定
3. **スキーマ定義** - Pydanticスキーマの作成
4. **CRUD実装** - データベース操作ロジック
5. **MCPツール実装** - FastMCPツールの実装
6. **MCPリソース実装** - FastMCPリソースの実装
7. **テスト作成** - 単体テストと統合テスト

#### 3. コーディング規約
- **命名規則**
  - クラス名: PascalCase（例: `ProjectModel`）
  - 関数名・変数名: snake_case（例: `get_project_by_id`）
  - 定数: UPPER_SNAKE_CASE（例: `DATABASE_URL`）
  - MCPツール名: snake_case（例: `create_project`）

- **ファイル構成**
  - 1ファイル1責務の原則を守る
  - モデル、スキーマ、CRUD、ツール、リソースは別々のファイルに分離
  - 各ディレクトリに`__init__.py`を配置

#### 4. MCP設計原則
- ツールは明確な単一の操作を実行
- リソースは読み取り専用のデータアクセス
- 適切なエラーハンドリングとメッセージ
- 型ヒントとdocstringによる明確な仕様定義

#### 5. データベース設計
- 正規化を適切に行う
- インデックスを適切に設定する
- created_at, updated_atなどの共通カラムを持つ
- 外部キー制約を適切に設定する

#### 6. テスト方針
- TDD（テスト駆動開発）を実践
- 各機能実装前にテストを作成
- カバレッジ80%以上を目標とする
- 単体テストと統合テストの両方を実装

##### TDDサイクル（Red-Green-Refactor）
1. **Red（失敗するテストを書く）**
   - 実装前に期待する動作を定義するテストを作成
   - テストは必ず失敗することを確認（実装がないため）
   - テストケースは具体的で明確な仕様を表現

2. **Green（テストを通す最小限の実装）**
   - テストが通る最小限のコードを実装
   - この段階では完璧なコードを書く必要はない
   - まずは動作することを優先

3. **Refactor（コードを改善）**
   - テストが通った状態を維持しながらコードを改善
   - 重複の除去、可読性の向上、パフォーマンスの最適化
   - テストが常に通ることを確認しながら進める

##### テスト作成のガイドライン
- **テストファイルの命名規則**
  - `test_<対象ファイル名>.py`（例: `test_project_tools.py`）
  - テストクラス: `Test<対象クラス名>`（例: `TestProjectTools`）
  - テスト関数: `test_<テスト内容>`（例: `test_create_project_success`）

- **テストの構造（AAA パターン）**
  ```python
  async def test_example():
      # Arrange（準備）: テストデータやモックの設定
      test_data = {"name": "Test Project"}
      
      # Act（実行）: テスト対象の処理を実行
      result = await create_project(test_data)
      
      # Assert（検証）: 期待する結果を確認
      assert result["name"] == "Test Project"
  ```

- **テストケースの網羅性**
  - 正常系: 期待される入力での動作確認
  - 異常系: 不正な入力やエラー条件での動作確認
  - 境界値: 最大値、最小値、空値などの境界条件
  - エッジケース: 特殊な条件や稀なシナリオ

- **フィクスチャの活用**
  - pytestのフィクスチャを使用してテストデータを管理
  - データベースのセットアップ/クリーンアップ
  - 共通のテストデータの再利用
  - FastMCPクライアントのモック

- **モックとスタブ**
  - 外部依存（API、データベース）はモック化
  - `pytest-mock`や`unittest.mock`を活用
  - 実際の外部サービスに依存しないテスト

##### 実装手順（TDDベース）
1. **TODOから次のタスクを選択**
2. **失敗するテストを作成**（Red）
   - `tests/`ディレクトリに適切なテストファイルを作成
   - 期待する動作を明確に定義
3. **テストを実行して失敗を確認**
   - `pytest tests/test_<対象>.py -v`
4. **最小限の実装を追加**（Green）
   - テストが通る最小限のコードを実装
5. **テストが通ることを確認**
   - 全てのテストが通るまで実装を調整
6. **コードをリファクタリング**（Refactor）
   - テストが通った状態を維持しながら改善
7. **全テストを実行**
   - `pytest`で全体のテストスイートを実行
8. **コミット**
   - テストと実装を一緒にコミット

##### テストコマンド
```bash
# 特定のテストファイルを実行
pytest tests/test_project_tools.py -v

# 特定のテスト関数を実行
pytest tests/test_project_tools.py::test_create_project -v

# カバレッジレポート付きで実行
pytest --cov=app --cov-report=html

# 失敗したテストのみ再実行
pytest --lf

# テストの実行を監視（ファイル変更時に自動実行）
pytest-watch
```

#### 7. エラーハンドリング
- 適切な例外処理を実装
- ユーザーフレンドリーなエラーメッセージ
- ログ出力による問題の追跡可能性確保
- MCPコンテキストを使用したログ送信

#### 8. セキュリティ考慮事項
- SQLインジェクション対策（ORMの使用）
- 入力値の適切なバリデーション
- 環境変数による機密情報の管理
- 必要に応じてMCP認証の実装

### コミット規約
- feat: 新機能追加
- fix: バグ修正
- docs: ドキュメント更新
- style: コードスタイルの変更
- refactor: リファクタリング
- test: テストの追加・修正
- chore: ビルドプロセスやツールの変更

### 注意事項
- マイグレーションは必ず実行前に確認する
- 本番環境へのデプロイ前に全テストを実行する
- MCPツールの破壊的変更は避ける
- パフォーマンスを意識した実装を心がける