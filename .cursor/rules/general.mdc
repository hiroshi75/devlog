---
description: 
globs: 
alwaysApply: true
---
## 開発の流れ

### ライブラリの管理
ライブラリはuvで管理しているので、インストールは
uv add ライブラリ名
でインストールしてください。

### テスト
 - テストはtestsディレクトリにおき、pytestで実行します。
 - 開発はTDDで行います。
 - テストが通らない場合、テストを書き換えるのではなく、原因を調査して実装を修正してください。
 - 

 ### 開発の管理

 - README.mdに作るものの仕様が書いてあります。
 - .envはあなたには見えないかもしれませんが、適切に書かれています。

## DevStatusAPI 開発方針

### プロジェクト概要
- Slack風の開発状況共有サービスのバックエンドAPI
- 複数人が複数プロジェクトで複数タスクを進める状況を一元管理
- メッセージ形式での進捗管理とコミュニケーション

### 技術スタック
- Python 3.12+
- FastAPI（Webフレームワーク）
- SQLAlchemy（ORM）
- PostgreSQL/SQLite（データベース）
- Alembic（マイグレーション）
- Pydantic（データバリデーション）
- pytest（テスティング）

### ディレクトリ構造
```
devlog/
├── app/
│   ├── main.py          # FastAPIアプリケーションのエントリーポイント
│   ├── models/          # SQLAlchemyモデル定義
│   ├── schemas/         # Pydanticスキーマ定義
│   ├── crud/            # CRUD操作ロジック
│   ├── api/             # APIエンドポイント（ルーター）
│   └── db/              # データベース接続・設定
├── tests/               # テストコード
├── alembic/             # データベースマイグレーション
├── docs/                # ドキュメント
│   └── TODO.md          # 開発タスク管理
└── .env                 # 環境変数設定
```

### 開発の進め方

#### 1. タスク管理
- `docs/TODO.md`に全タスクがスモールステップで記載されている
- 完了したタスクはチェックボックスにチェックを入れる
- 新しい課題は適切なセクションに追加する
- 優先度の高いタスクから順に実施する

#### 2. 実装の順序
1. **環境構築** - ディレクトリ構造と依存関係のセットアップ
2. **データベース設計** - モデル定義とマイグレーション設定
3. **スキーマ定義** - Pydanticスキーマの作成
4. **CRUD実装** - データベース操作ロジック
5. **APIエンドポイント** - RESTful APIの実装
6. **テスト作成** - 単体テストと統合テスト

#### 3. コーディング規約
- **命名規則**
  - クラス名: PascalCase（例: `ProjectModel`）
  - 関数名・変数名: snake_case（例: `get_project_by_id`）
  - 定数: UPPER_SNAKE_CASE（例: `DATABASE_URL`）

- **ファイル構成**
  - 1ファイル1責務の原則を守る
  - モデル、スキーマ、CRUD、APIは別々のファイルに分離
  - 各ディレクトリに`__init__.py`を配置

#### 4. API設計原則
- RESTfulな設計を採用
- 適切なHTTPステータスコードを返す
- エラーレスポンスは一貫した形式で返す
- ページネーション、フィルタリング、ソートをサポート

#### 5. データベース設計
- 正規化を適切に行う
- インデックスを適切に設定する
- created_at, updated_atなどの共通カラムを持つ
- 外部キー制約を適切に設定する

#### 6. テスト方針
- TDD（テスト駆動開発）を実践
- 各機能実装前にテストを作成
- カバレッジ80%以上を目標とする
- 単体テストと統合テストの両方を実装

#### 7. エラーハンドリング
- 適切な例外処理を実装
- ユーザーフレンドリーなエラーメッセージ
- ログ出力による問題の追跡可能性確保

#### 8. セキュリティ考慮事項
- SQLインジェクション対策（ORMの使用）
- 入力値の適切なバリデーション
- 環境変数による機密情報の管理
- CORS設定の適切な実装

### コミット規約
- feat: 新機能追加
- fix: バグ修正
- docs: ドキュメント更新
- style: コードスタイルの変更
- refactor: リファクタリング
- test: テストの追加・修正
- chore: ビルドプロセスやツールの変更

### 注意事項
- マイグレーションは必ず実行前に確認する
- 本番環境へのデプロイ前に全テストを実行する
- APIの破壊的変更は避ける（バージョニングを検討）
- パフォーマンスを意識した実装を心がける